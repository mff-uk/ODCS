<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>eu.unifiedviews</groupId>
		<artifactId>uv-core</artifactId>
		<version>2.3.0</version>
	</parent>
	<artifactId>commons-app</artifactId>
	<name>commons-app</name>
	<description />

	<!-- Shared version number properties -->
	<properties>
		<logback.version>1.0.13</logback.version>
		<aspectj.version>1.8.7</aspectj.version>
		<eclipselink.version>2.5.2</eclipselink.version>
		<maven.artifact.version>3.3.3</maven.artifact.version>
	</properties>

	<repositories>

		<repository>
			<id>repo.eclipse.org</id>
			<!-- repository for org.eclipse.tycho -->
			<name>Project Repository - Snapshots</name>
			<url>https://repo.eclipse.org/content/repositories/snapshots/</url>
		</repository>

		<repository> <!-- spring repository -->
			<id>com.springsource.repository.bundles.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>

		<repository>
			<id>maven.eea.sk</id>
			<name>maven.eea.sk-public</name>
			<url>http://maven.eea.sk/artifactory/public/</url>
		</repository>

	</repositories>

	<dependencies>
		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dpu-api</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dpu-helpers</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dpu-config-vaadin</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-rdf</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-files</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-relational</artifactId>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-helpers</artifactId>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-rdf</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-rdf-impl</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency> <!-- file dataunit project -->
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-file-impl</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency> <!-- relational dataunit project -->
			<groupId>eu.unifiedviews</groupId>
			<artifactId>dataunit-relational-impl</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency> <!-- logback as implementation org.slf4j -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>

		<dependency> <!-- xml object de-serialization -->
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
		</dependency>

		<dependency> <!-- OSGI impelemention -->
			<groupId>org.eclipse.tycho</groupId>
			<artifactId>org.eclipse.osgi</artifactId>
			<version>${eclipse.osgi.version}</version>
		</dependency>

		<dependency> <!-- apache.commons : delete folder recursive -->
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<type>jar</type>
		</dependency>

		<dependency> <!-- email sending -->
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>${javax.mail.version}</version>
		</dependency>

		<!-- SPRING DEPENDENCIES -->

		<!-- Core utilities used by other modules. Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans) This is the central artifact for Spring's Dependency Injection Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context) Define this if you use Spring Transactions or DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and TestNG This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- SPRING SECURITY LIBRARIES -->

		<!-- Contains core authentication and access-contol classes and interfaces, remoting support and basic provisioning APIs. Required by any application which uses Spring Security. Supports standalone applications, remote clients, method (service layer) security and JDBC user provisioning. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework.security.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Contains filters and related web-security infrastructure code. Anything with a servlet API dependency. You'll need it if you require Spring Security web authentication services and URL-based access-control. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.security.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Spring aspects so we can reference them in AspectJ aspects -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- CGLIB is required for proxying classes without interface -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>

		<!-- ASM depends on ASM-UTIL, CGLIB depends on ASM, however ASM is loaded by maven automatically while ASM-UTIL is not... -->
		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm-util</artifactId>
			<version>${asm.util.version}</version>
		</dependency>

		<!-- END OF SPRING DEPENDENCIES -->

		<!-- Embedded database used for testing -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
            <scope>test</scope>
		</dependency>

		<!-- EclipseLink dependencies -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.core</artifactId>
            <version>${eclipselink.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <version>${eclipselink.version}</version>
        </dependency>

        <dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>javax.persistence</artifactId>
			<version>${javax.persistence.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons.lang.version}</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.jdbc.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>1.2.3</version>
		</dependency>

		<!-- Aspect Oriented Programming with AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<dependency> <!-- Contains DataSource with connection pooling. -->
			<artifactId>commons-dbcp</artifactId>
			<groupId>commons-dbcp</groupId>
			<type>jar</type>
			<version>${commons.dpcp.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency> <!-- JUnit dependency -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgres.jdbc.version}</version>
		</dependency>

		<dependency>
			<groupId>org.jasypt</groupId>
			<artifactId>jasypt</artifactId>
			<version>${jasypt.version}</version>
		</dependency>
		
		<dependency> <!-- userd for comparing versions for import/export -->
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-artifact</artifactId>
			<version>${maven.artifact.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-site-plugin</artifactId>
			<version>3.3</version>
		</dependency>

        <!-- Needed for weaving -->
        <dependency>
            <groupId>javax.resource</groupId>
            <artifactId>connector-api</artifactId>
            <version>1.5</version>
        </dependency>
        <dependency>
            <groupId>javax.transaction</groupId>
            <artifactId>jta</artifactId>
            <version>1.1</version>
        </dependency>

    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<header>${project.basedir}/GPL-3.txt</header>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.17</version>
			</plugin>

			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.17</version>
			</plugin>

			<!-- Process classes after compilation to weave bytecode for JPA entities-->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<configuration>
							<tasks>
								<java classname="org.eclipse.persistence.tools.weaving.jpa.StaticWeave" classpathref="maven.runtime.classpath" fork="true">
									<arg line="-loglevel FINE -persistenceinfo src/main/resources target/classes target/classes" />
								</java>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- AspecJ maven plugin used for compile-time bytecode weaving. Needed for aspects to work. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.7</version>
				<configuration>
					<source>${project.java.source.version}</source>
					<target>${project.java.target.version}</target>
					<complianceLevel>${project.java.target.version}</complianceLevel>
					<showWeaveInfo>true</showWeaveInfo>
					<verbose>true</verbose>
					<weaveDependencies>
						<!-- We need to weave bytecode to EclipseLink dependency when catching exceptions thrown because corrupted sequences in db. See VirtuosoSequenceSanitizerAspect. -->
						<weaveDependency>
                            <groupId>org.eclipse.persistence</groupId>
                            <artifactId>org.eclipse.persistence.core</artifactId>
						</weaveDependency>
					</weaveDependencies>
					<aspectLibraries>
						<!-- Spring aspects are here so aspects defined therein are picked up by AspectJ and weaved properly (e.g. @Transactional, ...). -->
						<aspectLibrary>
							<groupId>org.springframework</groupId>
							<artifactId>spring-aspects</artifactId>
						</aspectLibrary>
					</aspectLibraries>
					<!-- This will get rid of "can't find superclass" errors when checking pointcut candidates for missing superclasses/interfaces in weaveDependencies (see above). -->
					<Xlint>ignore</Xlint>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<!-- Support for Java 8 -->
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjrt</artifactId>
						<version>${aspectj.version}</version>
					</dependency>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjtools</artifactId>
						<version>${aspectj.version}</version>
					</dependency>
				</dependencies>
			</plugin>

            <plugin>
                <!-- workaround to solve the eclipselink lazy loading issue, see https://github.com/UnifiedViews/Core/pull/555: the eclipselink core packages are signed which causes the backend to fail on start because on backend packaging it copies all the dependencies
which somehow messes up the signatures. The solution proposed in the web is to  filter the *.SF and *.RSA files from META-INF to remove the signature information when preparing the jar -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <excludes>
                        <exclude>**/*.RSA</exclude>
                        <exclude>**/*.DSA</exclude>
                        <exclude>**/*.SF</exclude>
                    </excludes>
                </configuration>
            </plugin>

        </plugins>


        <resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

	</build>
	<!-- define license -->
	<licenses>
		<license>
			<name>GNU General Public License, Version 3</name>
			<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
			<distribution>repo</distribution>
			<!-- https://maven.apache.org/pom.html#Licenses -->
		</license>
	</licenses>
</project>
