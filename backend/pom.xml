<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>eu.unifiedviews</groupId>
        <artifactId>uv-core</artifactId>
        <version>2.3.0</version>
    </parent>
    <artifactId>backend</artifactId>
    <packaging>jar</packaging>
    <name>backend</name>
    <description />

    <properties>
        <maven.build.timestamp.format>yyyyMMdd-HHmm</maven.build.timestamp.format>
        <buildTimestamp>${maven.build.timestamp}</buildTimestamp>
    </properties>

    <dependencies>
       
        <dependency> <!-- commons-app project -->
            <groupId>${project.groupId}</groupId>
            <artifactId>commons-app</artifactId>
            <version>${project.version}</version>
        </dependency>
        
        <dependency> 
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4</version>
        </dependency>

        <dependency> <!-- apache.commons : parse cmd. args -->
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>${commons.cli.version}</version>
            <type>jar</type>
        </dependency>

        <dependency> <!-- because of wrong version used by Apache-fuseki -->
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
            <version>${xml.apis.version}</version>
        </dependency>

        <dependency> <!-- JUnit dependency -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency> <!-- spring test support -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${org.springframework.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency> <!-- mockito for tests -->
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.server.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <header>${project.basedir}/GPL-3.txt</header>
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>cz.cuni.mff.xrg.odcs.backend.AppEntry</mainClass>
                            <classpathPrefix>lib/</classpathPrefix>
                            <classpathLayoutType>custom</classpathLayoutType>
                            <customClasspathLayout>$${artifact.artifactId}-$${artifact.version}$${dashClassifier?}-$${artifact.extension}/</customClasspathLayout>

                        </manifest>
                    </archive>
                </configuration>
            </plugin>

        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>2.9</version>
            <executions>
                <execution>
                    <!-- Dependencies are not just copied, but also unpacked - this is a workaround to solve the eclipselink lazy loading issue, see https://github.com/UnifiedViews/Core/pull/555: 
                     the eclipselink core packages are signed which causes the backend to fail on start because on backend packaging it copies all the dependencies which somehow messes up the signatures. 
                     The solution proposed in the web is to  filter the *.SF and *.RSA files from META-INF to remove the signature information when preparing the jar -->
                    <id>unpack-dependencies</id>
                    <phase>package</phase>
                    <goals>
                        <goal>unpack-dependencies</goal>
                    </goals>
                    <configuration>
                        <excludes>**\/*.SF,**\/*.DSA,**\/*.RSA</excludes>
                        <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        <includeScope>runtime</includeScope>
                        <excludeScope>provided</excludeScope>
                        <useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
                    </configuration>
                </execution>
            </executions>
        </plugin>

        </plugins>


        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>


    </build>
    <!-- define license -->
    <licenses>
        <license>
            <name>GNU General Public License, Version 3</name>
            <url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
            <distribution>repo</distribution>
            <!-- https://maven.apache.org/pom.html#Licenses -->
        </license>
    </licenses>
</project>
